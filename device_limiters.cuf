module device_limiters_mod


   use device_data_structure_mod

contains


!	The following subroutine computes the Venkatakrishnan limiter ..
!
!
   attributes(device) subroutine device_venkat_limiter(q_d, qm_d,min_dist_d, qtilde, phi, k)
!
!
   implicit none
!
   integer :: r, k
   real*8, intent(in) :: qtilde(5)
   real*8, intent(out) :: phi(5)
   real*8 :: q, del_neg, del_pos
   real*8 :: max_q, min_q, ds, epsi, num, den, temp

   !device variables
   real*8, intent(in):: q_d(5,max_points_d), qm_d(5,2,max_points_d)
   real*8, intent(in):: min_dist_d(max_points_d)

!
   do r = 1, 5
      q = q_d(r, k)
      del_neg = qtilde(r) - q
!
      if(dabs(del_neg) .le. 10d-6) then
         phi(r)=1.0d0
      else if(dabs(del_neg) .gt. 10d-6) then
         if(del_neg .gt. 0.0d0) then
            del_pos = qm_d(r,1,k) - q
         else if(del_neg .lt. 0.0d0) then
            del_pos = qm_d(r,2,k) - q
         endif
!
         epsi = VL_CONST*min_dist_d(k)
         epsi = epsi**3.0d0
         num = (del_pos*del_pos) + (epsi*epsi)  ! Numerator ..
         num = num*del_neg + 2.0d0*del_neg*del_neg*del_pos
         den = del_pos*del_pos + 2.0d0*del_neg*del_neg ! Denominator ..
         den = den + del_neg*del_pos + epsi*epsi
         den = den*del_neg
         temp = num/den
!
         if(temp .lt. 1.0d0) then
            phi(r) = temp
         else
            phi(r) = 1.0d0
         endif
      endif
   enddo
!
end subroutine
!
!
end module device_limiters_mod
