module device_state_update_mod
!
!
!
   use device_data_structure_mod
   use device_primitive_to_conserved_vector_mod
   use device_conserved_to_primitive_vector_mod
   use device_conserved_vector_Ubar_mod
!
!
contains



   attributes(global)	subroutine device_state_update( prim_d, tan1_d, tan2_d, nor_d,flux_res_d, res_sqr_d  )
! 		!
! 		!
   implicit none
   !
   integer :: i,  nbh, p, r, status,max_res_point_d,k
   real*8 :: U(5), temp, min_dist
   real*8 ::   sum_res_sqr_d(:), max_res_d,  res_sqr
   real*8, dimension(:,:), device :: res_sqr_d
   integer :: status_d(:)
   real*8  ::   prim_d(:,:), flux_res_d(:,:)
   real*8  ::   tan1_d(:,:), tan2_d(:,:), nor_d(:,:)
   real*8	:: Ubar(5)
   real*8 :: tan1(3), tan2(3), nor(3)


   i=threadIdx%x + (blockIdx%x - 1)*blockDim%x

   if(i <= wall_points_d) then
      k = wall_points_index_d(i)
      call device_primitive_to_conserved(k, U, prim_d, tan1_d, tan2_d, nor_d )
      temp = U(1)
      U =	U - flux_res_d(:,k)
      U(4) = 0.0d0
      res_sqr_d(1,k) = (U(1) - temp)*(U(1) - temp)
      call device_conserved_to_primitive(k, U,prim_d, tan1_d, tan2_d, nor_d )
   end if

   if(i <= outer_points_d) then
      !
      k = outer_points_index_d(i)
      call device_conserved_vector_Ubar(k, U, tan1_d, tan2_d, nor_d, prim_d )
      temp = U(1)
      U =	U - flux_res_d(:,k)
      call device_conserved_to_primitive(k, U,prim_d, tan1_d, tan2_d, nor_d )
   endif


   if(i <= interior_points_d) then
      !
      k = interior_points_index_d(i)
      call device_primitive_to_conserved(k, U, prim_d, tan1_d, tan2_d, nor_d )
      temp = U(1)
      U =	U - flux_res_d(:,k)
      res_sqr_d(2,k) = (U(1) - temp)*(U(1) - temp)
      call device_conserved_to_primitive(k, U,prim_d, tan1_d, tan2_d, nor_d )
      !
   endif

end subroutine


!
!
 !
!
end module device_state_update_mod
!
